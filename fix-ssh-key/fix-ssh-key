#!/usr/bin/env bash

# Script: fix-ssh-key
# Zweck: SSH Known Hosts für einen Host reparieren und aktualisieren
# Verwendung: ./fix-ssh-key <hostname|ip>

set -euo pipefail

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funktionen für farbigen Output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Hilfe anzeigen
show_help() {
    cat << EOF
SSH Known Hosts Reparatur Tool

VERWENDUNG:
    $0 <hostname|ip> [options]

BESCHREIBUNG:
    Entfernt alte SSH-Schlüssel aus known_hosts und fügt aktuelle hinzu.
    Funktioniert mit Hostnamen und IP-Adressen.

OPTIONEN:
    -v, --verbose       Detaillierte Ausgabe
    -p, --port PORT     SSH-Port (Standard: 22)
    -t, --type TYPE     Schlüssel-Typ (rsa,ecdsa,ed25519; Standard: alle)
    -h, --help          Diese Hilfe anzeigen

BEISPIELE:
    $0 example.com                    # Standard-Reparatur
    $0 192.168.1.100                  # Mit IP-Adresse
    $0 example.com -p 2222            # Anderer Port
    $0 example.com -t rsa,ecdsa       # Nur RSA und ECDSA Schlüssel
    $0 example.com --verbose          # Mit detaillierter Ausgabe

VORAUSSETZUNGEN:
    - ssh-keygen muss verfügbar sein
    - ssh-keyscan muss verfügbar sein
    - dig für Hostname-Auflösung (optional)

EOF
}

# Abhängigkeiten prüfen
check_dependencies() {
    local missing_deps=()
    
    if ! command -v ssh-keygen &> /dev/null; then
        missing_deps+=("ssh-keygen")
    fi
    
    if ! command -v ssh-keyscan &> /dev/null; then
        missing_deps+=("ssh-keyscan")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Fehlende Abhängigkeiten: ${missing_deps[*]}"
        log_info "Diese sind normalerweise Teil von OpenSSH"
        exit 1
    fi
}

# IP-Adresse für Hostname auflösen
resolve_hostname() {
    local hostname="$1"
    local ip=""
    
    # Prüfen ob es bereits eine IP ist
    if [[ "$hostname" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "$hostname"
        return 0
    fi
    
    # IPv6 Check (vereinfacht)
    if [[ "$hostname" =~ : ]]; then
        echo "$hostname"
        return 0
    fi
    
    # DNS-Auflösung versuchen
    if command -v dig &> /dev/null; then
        if ip=$(dig +short "$hostname" A | head -1); then
            if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "$ip"
                return 0
            fi
        fi
    elif command -v nslookup &> /dev/null; then
        if ip=$(nslookup "$hostname" 2>/dev/null | grep -A1 "Name:" | grep "Address:" | cut -d' ' -f2); then
            if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "$ip"
                return 0
            fi
        fi
    elif command -v host &> /dev/null; then
        if ip=$(host "$hostname" 2>/dev/null | grep "has address" | cut -d' ' -f4 | head -1); then
            if [[ -n "$ip" && "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "$ip"
                return 0
            fi
        fi
    fi
    
    # Fallback: getent (falls verfügbar)
    if command -v getent &> /dev/null; then
        if ip=$(getent hosts "$hostname" 2>/dev/null | cut -d' ' -f1 | head -1); then
            if [[ -n "$ip" ]]; then
                echo "$ip"
                return 0
            fi
        fi
    fi
    
    return 1
}

# Alte Schlüssel entfernen
remove_old_keys() {
    local host="$1"
    local port="$2"
    local verbose="$3"
    local ip=""
    
    log_info "Entferne alte SSH-Schlüssel für $host"
    
    # Standard-Port oder spezifischer Port
    local host_entry="$host"
    if [[ "$port" != "22" ]]; then
        host_entry="[$host]:$port"
    fi
    
    # Hostname entfernen
    if [[ "$verbose" == "true" ]]; then
        ssh-keygen -R "$host_entry" 2>&1 | grep -v "not found in" || true
    else
        ssh-keygen -R "$host_entry" &>/dev/null || true
    fi
    
    # IP-Adresse auflösen und auch entfernen
    if ip=$(resolve_hostname "$host"); then
        if [[ "$ip" != "$host" ]]; then
            log_info "IP-Adresse aufgelöst: $host -> $ip"
            
            local ip_entry="$ip"
            if [[ "$port" != "22" ]]; then
                ip_entry="[$ip]:$port"
            fi
            
            if [[ "$verbose" == "true" ]]; then
                ssh-keygen -R "$ip_entry" 2>&1 | grep -v "not found in" || true
            else
                ssh-keygen -R "$ip_entry" &>/dev/null || true
            fi
        fi
    else
        if [[ "$verbose" == "true" ]]; then
            log_warn "Konnte IP-Adresse für $host nicht auflösen"
        fi
    fi
}

# Neue Schlüssel hinzufügen
add_new_keys() {
    local host="$1"
    local port="$2"
    local key_types="$3"
    local verbose="$4"
    local ip=""
    
    log_info "Füge neue SSH-Schlüssel hinzu für $host:$port"
    
    # IP-Adresse auflösen
    ip=$(resolve_hostname "$host") || ip=""
    
    # Hosts für ssh-keyscan vorbereiten
    local scan_hosts="$host"
    if [[ -n "$ip" && "$ip" != "$host" ]]; then
        scan_hosts="$host,$ip"
    fi
    
    # Schlüssel scannen und hinzufügen
    local scan_cmd="ssh-keyscan"
    
    # Key-Types hinzufügen
    for key_type in ${key_types//,/ }; do
        scan_cmd="$scan_cmd -t $key_type"
    done
    
    # Port hinzufügen
    if [[ "$port" != "22" ]]; then
        scan_cmd="$scan_cmd -p $port"
    fi
    
    scan_cmd="$scan_cmd $scan_hosts"
    
    if [[ "$verbose" == "true" ]]; then
        log_info "Ausgeführter Befehl: $scan_cmd"
    fi
    
    # Scannen und zu known_hosts hinzufügen
    local temp_keys
    if temp_keys=$($scan_cmd 2>/dev/null); then
        if [[ -n "$temp_keys" ]]; then
            echo "$temp_keys" >> ~/.ssh/known_hosts
            log_success "Neue SSH-Schlüssel hinzugefügt"
            
            if [[ "$verbose" == "true" ]]; then
                log_info "Hinzugefügte Schlüssel:"
                echo "$temp_keys" | while IFS= read -r line; do
                    log_info "  $line"
                done
            fi
        else
            log_warn "Keine SSH-Schlüssel erhalten"
            return 1
        fi
    else
        log_error "ssh-keyscan fehlgeschlagen für $host:$port"
        return 1
    fi
}

# Verbindung testen
test_connection() {
    local host="$1"
    local port="$2"
    
    log_info "Teste SSH-Verbindung zu $host:$port"
    
    if timeout 10 ssh -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" "$host" exit 2>/dev/null; then
        log_success "SSH-Verbindung erfolgreich"
        return 0
    else
        case $? in
            124) log_warn "Verbindungstest-Timeout" ;;
            255) log_warn "SSH-Verbindung fehlgeschlagen (normal bei Host-Key-Updates)" ;;
            *) log_warn "SSH-Test unbestimmt (Exit-Code: $?)" ;;
        esac
        return 1
    fi
}

# Hauptfunktion
main() {
    local host=""
    local port="22"
    local key_types="rsa,ecdsa,ed25519"
    local verbose="false"
    
    # Argumentverarbeitung
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -t|--type)
                key_types="$2"
                shift 2
                ;;
            -*)
                log_error "Unbekannte Option: $1"
                echo "Verwendung: $0 <hostname|ip> [options]"
                exit 1
                ;;
            *)
                if [[ -z "$host" ]]; then
                    host="$1"
                else
                    log_error "Mehrere Hosts angegeben. Nur einer erlaubt."
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Host-Parameter prüfen
    if [[ -z "$host" ]]; then
        log_error "Hostname oder IP-Adresse erforderlich"
        echo "Verwendung: $0 <hostname|ip> [options]"
        echo "Für Hilfe: $0 --help"
        exit 1
    fi
    
    # Port validieren
    if [[ ! "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1 ]] || [[ "$port" -gt 65535 ]]; then
        log_error "Ungültiger Port: $port"
        exit 1
    fi
    
    # Abhängigkeiten prüfen
    check_dependencies
    
    # SSH-Verzeichnis erstellen falls nicht vorhanden
    if [[ ! -d ~/.ssh ]]; then
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        log_info "SSH-Verzeichnis erstellt"
    fi
    
    # known_hosts erstellen falls nicht vorhanden
    if [[ ! -f ~/.ssh/known_hosts ]]; then
        touch ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        log_info "known_hosts-Datei erstellt"
    fi
    
    log_info "SSH Known Hosts Reparatur für $host:$port"
    
    # Alte Schlüssel entfernen
    remove_old_keys "$host" "$port" "$verbose"
    
    # Neue Schlüssel hinzufügen
    if add_new_keys "$host" "$port" "$key_types" "$verbose"; then
        log_success "SSH-Schlüssel erfolgreich aktualisiert"
        
        # Optional: Verbindung testen
        if [[ "$verbose" == "true" ]]; then
            test_connection "$host" "$port"
        fi
    else
        log_error "Fehler beim Hinzufügen neuer Schlüssel"
        exit 1
    fi
}

# Script ausführen
main "$@"