#!/usr/bin/env bash

# Script: brewfile-commenter.sh
# Zweck: Fügt automatisch Beschreibungen zu Brewfile-Einträgen hinzu
# Verwendung: ./brewfile-commenter.sh [Brewfile]

set -euo pipefail

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funktionen für farbigen Output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Hilfe anzeigen
show_help() {
    cat << EOF
Brewfile Commenter

VERWENDUNG:
    $0 [Brewfile]

BESCHREIBUNG:
    Fügt automatisch Beschreibungen zu allen brew und cask Einträgen in einem
    Brewfile hinzu. Erstellt ein Backup vor der Änderung.

BEISPIELE:
    $0                    # Verarbeitet ./Brewfile
    $0 MyBrewfile         # Verarbeitet ./MyBrewfile
    $0 /path/to/Brewfile  # Verarbeitet Brewfile am angegebenen Pfad

VORAUSSETZUNGEN:
    - brew muss installiert sein
    - jq muss installiert sein (brew install jq)

EOF
}

# Abhängigkeiten prüfen
check_dependencies() {
    local missing_deps=()
    
    if ! command -v brew &> /dev/null; then
        missing_deps+=("brew")
    fi
    
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Fehlende Abhängigkeiten: ${missing_deps[*]}"
        log_info "Installation: brew install jq"
        exit 1
    fi
}

# Backup erstellen
create_backup() {
    local brewfile="$1"
    local backup_file="${brewfile}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if cp "$brewfile" "$backup_file"; then
        log_info "Backup erstellt: $backup_file"
        echo "$backup_file"
    else
        log_error "Konnte kein Backup erstellen"
        exit 1
    fi
}

# Beschreibung für brew Package holen
get_brew_description() {
    local package="$1"
    local desc
    
    if desc=$(brew info --json=v2 "$package" 2>/dev/null | jq -r '.formulae[]?.desc // empty' 2>/dev/null); then
        if [[ -n "$desc" && "$desc" != "null" ]]; then
            echo "$desc"
            return 0
        fi
    fi
    
    echo "No description available"
    return 1
}

# Beschreibung für cask Package holen
get_cask_description() {
    local package="$1"
    local desc
    
    if desc=$(brew info --json=v2 "$package" 2>/dev/null | jq -r '.casks[]?.desc // empty' 2>/dev/null); then
        if [[ -n "$desc" && "$desc" != "null" ]]; then
            echo "$desc"
            return 0
        fi
    fi
    
    echo "No description available"
    return 1
}

# Brewfile verarbeiten
process_brewfile() {
    local brewfile="$1"
    local tmpfile=$(mktemp /tmp/brewfile-commenter.XXXXXX)
    local processed=0
    local failed=0
    
    log_info "Verarbeite $brewfile..."
    
    # TAP-Einträge unverändert kopieren
    if grep -q "^tap " "$brewfile" 2>/dev/null; then
        grep "^tap " "$brewfile" >> "$tmpfile"
        log_info "TAP-Einträge kopiert"
    fi
    
    # BREW-Einträge mit Beschreibungen verarbeiten
    log_info "Verarbeite brew-Einträge..."
    while IFS= read -r line; do
        if [[ "$line" =~ ^brew[[:space:]]+ ]]; then
            # Package-Namen extrahieren
            local package
            if package=$(echo "$line" | grep -o '"[^"]*"' | head -1 | tr -d '"'); then
                log_info "Verarbeite brew package: $package"
                
                local desc
                if desc=$(get_brew_description "$package"); then
                    echo "$line # $desc" >> "$tmpfile"
                    ((processed++))
                else
                    log_warn "Keine Beschreibung für $package gefunden"
                    echo "$line" >> "$tmpfile"
                    ((failed++))
                fi
            else
                echo "$line" >> "$tmpfile"
            fi
        fi
    done < <(grep "^brew " "$brewfile" 2>/dev/null || true)
    
    # CASK-Einträge mit Beschreibungen verarbeiten
    log_info "Verarbeite cask-Einträge..."
    while IFS= read -r line; do
        if [[ "$line" =~ ^cask[[:space:]]+ ]]; then
            # Package-Namen extrahieren
            local package
            if package=$(echo "$line" | grep -o '"[^"]*"' | head -1 | tr -d '"'); then
                log_info "Verarbeite cask package: $package"
                
                local desc
                if desc=$(get_cask_description "$package"); then
                    echo "$line # $desc" >> "$tmpfile"
                    ((processed++))
                else
                    log_warn "Keine Beschreibung für $package gefunden"
                    echo "$line" >> "$tmpfile"
                    ((failed++))
                fi
            else
                echo "$line" >> "$tmpfile"
            fi
        fi
    done < <(grep "^cask " "$brewfile" 2>/dev/null || true)
    
    # MAS-Einträge unverändert kopieren
    if grep -q "^mas " "$brewfile" 2>/dev/null; then
        grep "^mas " "$brewfile" >> "$tmpfile"
        log_info "MAS-Einträge kopiert"
    fi
    
    # Andere Zeilen (Kommentare, etc.) kopieren
    while IFS= read -r line; do
        if [[ ! "$line" =~ ^(tap|brew|cask|mas)[[:space:]] ]] && [[ -n "$line" ]]; then
            echo "$line" >> "$tmpfile"
        fi
    done < "$brewfile"
    
    # Ersetzen der ursprünglichen Datei
    if mv "$tmpfile" "$brewfile"; then
        log_success "Brewfile erfolgreich aktualisiert"
        log_info "Verarbeitet: $processed packages"
        if [[ $failed -gt 0 ]]; then
            log_warn "Fehlgeschlagen: $failed packages"
        fi
    else
        log_error "Fehler beim Aktualisieren der Datei"
        rm -f "$tmpfile"
        exit 1
    fi
}

# Hauptfunktion
main() {
    # Hilfe anzeigen
    if [[ "${1:-}" == "-h" ]] || [[ "${1:-}" == "--help" ]]; then
        show_help
        exit 0
    fi
    
    # Brewfile bestimmen
    local brewfile="${1:-Brewfile}"
    
    # Prüfen ob Datei existiert
    if [[ ! -f "$brewfile" ]]; then
        log_error "Brewfile nicht gefunden: $brewfile"
        log_info "Verwendung: $0 [Brewfile]"
        exit 1
    fi
    
    # Abhängigkeiten prüfen
    check_dependencies
    
    # Backup erstellen
    local backup_file
    backup_file=$(create_backup "$brewfile")
    
    # Verarbeitung
    if process_brewfile "$brewfile"; then
        log_success "Verarbeitung abgeschlossen"
        log_info "Original gesichert als: $backup_file"
    else
        log_error "Verarbeitung fehlgeschlagen"
        log_info "Wiederherstellung aus Backup: mv '$backup_file' '$brewfile'"
        exit 1
    fi
}

# Script ausführen
main "$@"