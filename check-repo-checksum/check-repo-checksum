#!/usr/bin/env bash

# Script: check-repo-checksum
# Zweck: Prüft RPM-Paket-Prüfsummen gegen Repository-Metadaten
# Verwendung: ./check-repo-checksum <REPO_BASE_URL> <RPM_FILENAME>

set -euo pipefail

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'  # No Color

# Globale Variablen
VERBOSE=false

# Funktionen für farbigen Output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${BLUE}[VERBOSE]${NC} $1" >&2
    fi
}

# Hilfe anzeigen
show_help() {
    cat << EOF
check-repo-checksum - RPM Repository Checksum Validator

VERWENDUNG:
    $0 <REPO_BASE_URL> <RPM_FILENAME> [OPTIONEN]

BESCHREIBUNG:
    Lädt repomd.xml und primary.xml.gz von einem YUM/DNF Repository,
    extrahiert die erwartete Prüfsumme für ein RPM-Paket, lädt das Paket
    herunter und vergleicht die tatsächliche mit der erwarteten Prüfsumme.

ARGUMENTE:
    REPO_BASE_URL            Basis-URL des Repositories (z.B. https://repo.example.com/centos/7/x86_64)
    RPM_FILENAME             Name der RPM-Datei (z.B. package-1.0-1.el7.x86_64.rpm)

OPTIONEN:
    -v, --verbose            Detaillierte Ausgabe
    -h, --help               Diese Hilfe anzeigen

BEISPIELE:
    # Standard-Verwendung
    $0 https://repo.example.com/centos/7/x86_64 nginx-1.20.1-1.el7.x86_64.rpm

    # Mit detaillierter Ausgabe
    $0 https://repo.example.com/centos/7/x86_64 nginx-1.20.1-1.el7.x86_64.rpm --verbose

VORAUSSETZUNGEN:
    - curl muss installiert sein
    - gawk muss installiert sein (GNU awk)
    - grep muss installiert sein
    - sed muss installiert sein
    - gunzip muss installiert sein
    - sha256sum muss installiert sein
    - sha1sum muss installiert sein

FUNKTIONSWEISE:
    1. Lädt repomd.xml vom Repository
    2. Extrahiert den Pfad zur primary.xml.gz
    3. Lädt und entpackt primary.xml.gz
    4. Extrahiert erwartete Prüfsumme für das RPM-Paket
    5. Lädt das RPM-Paket herunter
    6. Berechnet die tatsächliche Prüfsumme
    7. Vergleicht erwartete mit tatsächlicher Prüfsumme

HINWEISE:
    - Temporäre Dateien werden automatisch gelöscht
    - Unterstützt SHA256 und SHA1 Prüfsummen
    - Erfordert Netzwerk-Zugriff zum Repository
EOF
}

# Abhängigkeiten prüfen
check_dependencies() {
    local missing_deps=()

    for tool in curl gawk grep sed gunzip sha256sum sha1sum; do
        if ! command -v "$tool" &> /dev/null; then
            missing_deps+=("$tool")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Fehlende Abhängigkeiten: ${missing_deps[*]}"
        log_info "Installation:"
        log_info "  macOS: brew install coreutils gawk grep gnu-sed gzip"
        log_info "  Linux: apt install curl gawk grep sed gzip coreutils"
        return 1
    fi

    return 0
}

# Parameter parsen
parse_arguments() {
    # Zuerst die Positional-Parameter speichern
    local positional_args=()

    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                log_error "Unbekannte Option: $1"
                show_help
                exit 1
                ;;
            *)
                positional_args+=("$1")
                shift
                ;;
        esac
    done

    # Positional-Parameter zurück setzen
    set -- "${positional_args[@]}"

    if [[ $# -lt 2 ]]; then
        log_error "Zu wenige Argumente"
        show_help
        exit 1
    fi

    REPO="${1%/}"
    RPM_FILE="$2"
}

# Hauptlogik
main() {
    # Abhängigkeiten prüfen
    if ! check_dependencies; then
        exit 2
    fi

    # Parameter parsen
    parse_arguments "$@"

    # Temporäres Verzeichnis erstellen
    TMPDIR="$(mktemp -d)"
    trap 'rm -rf "$TMPDIR"' EXIT

    log_verbose "Temporäres Verzeichnis: $TMPDIR"
    log_info "Repository: $REPO"
    log_info "Paket: $RPM_FILE"

    # 1) repomd.xml laden
    log_verbose "Lade repomd.xml ..."
    if ! curl -fsSL --retry 3 --retry-delay 1 --compressed \
         -H 'Cache-Control: no-cache' \
         -o "$TMPDIR/repomd.xml" \
         "$REPO/repodata/repomd.xml"; then
        log_error "Konnte repomd.xml nicht laden von: $REPO/repodata/repomd.xml"
        exit 3
    fi

    # 2) primary.xml.gz Pfad finden
    log_verbose "Extrahiere primary.xml.gz Pfad ..."
    PRIMARY_GZ_PATH="$(gawk '
      /<data[^>]*type="primary"/,/<\/data>/ {
        if (match($0, /href="([^"]+)"/, m)) { print m[1]; exit }
      }' "$TMPDIR/repomd.xml")"

    if [[ -z "$PRIMARY_GZ_PATH" ]]; then
        log_error "Konnte primary.xml.gz nicht in repomd.xml finden"
        exit 3
    fi

    log_verbose "Primary XML Pfad: $PRIMARY_GZ_PATH"

    # 3) primary.xml.gz laden & entpacken
    log_verbose "Lade und entpacke primary.xml.gz ..."
    if ! curl -fsSL --retry 3 --retry-delay 1 --compressed \
         -H 'Cache-Control: no-cache' \
         -o "$TMPDIR/primary.xml.gz" \
         "$REPO/$PRIMARY_GZ_PATH"; then
        log_error "Konnte primary.xml.gz nicht laden"
        exit 3
    fi

    if ! gunzip -f "$TMPDIR/primary.xml.gz"; then
        log_error "Konnte primary.xml.gz nicht entpacken"
        exit 3
    fi

    PRIMARY_XML="$TMPDIR/primary.xml"

    # 4) Erwartete Prüfsumme extrahieren
    log_verbose "Extrahiere erwartete Prüfsumme für $RPM_FILE ..."
    read -r EXPECTED_TYPE EXPECTED_SUM <<<"$(gawk -v file="$RPM_FILE" '
      BEGIN{ RS="</package>"; ORS=""; }
      {
        if ($0 ~ file) {
          if (match($0, /<checksum[^>]*type="([^"]+)"[^>]*>([0-9a-f]+)<\/checksum>/, m)) {
            printf "%s %s\n", m[1], m[2];
            exit
          }
        }
      }' "$PRIMARY_XML")"

    if [[ -z "${EXPECTED_SUM:-}" ]]; then
        log_error "Kein Eintrag für $RPM_FILE in primary.xml gefunden"
        exit 4
    fi

    log_info "Erwartete Prüfsumme ($EXPECTED_TYPE): $EXPECTED_SUM"

    # 5) RPM laden
    log_verbose "Lade RPM-Paket ..."
    if ! curl -fsSL --retry 3 --retry-delay 1 --compressed \
         -H 'Cache-Control: no-cache' \
         -o "$TMPDIR/$RPM_FILE" \
         "$REPO/$RPM_FILE"; then
        log_error "Konnte RPM nicht laden: $REPO/$RPM_FILE"
        exit 5
    fi

    # 6) Prüfsumme berechnen
    log_verbose "Berechne tatsächliche Prüfsumme ..."
    case "$EXPECTED_TYPE" in
      sha256)
        ACTUAL_SUM="$(sha256sum "$TMPDIR/$RPM_FILE" | gawk '{print $1}')"
        ;;
      sha1)
        ACTUAL_SUM="$(sha1sum "$TMPDIR/$RPM_FILE" | gawk '{print $1}')"
        ;;
      *)
        log_error "Unbekannter Checksum-Typ: $EXPECTED_TYPE"
        exit 5
        ;;
    esac

    log_info "Gefundene Prüfsumme ($EXPECTED_TYPE): $ACTUAL_SUM"

    # 7) Vergleichen
    if [[ "$EXPECTED_SUM" == "$ACTUAL_SUM" ]]; then
        log_success "Prüfsummen stimmen überein ✅"
        exit 0
    else
        log_error "Prüfsummen unterscheiden sich! ❌"
        log_error "Erwartet: $EXPECTED_SUM"
        log_error "Erhalten: $ACTUAL_SUM"
        exit 6
    fi
}

# Script-Ausführung
main "$@"
