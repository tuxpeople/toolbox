#!/usr/bin/env bash

# Script: yt-get
# Zweck: Wrapper für yt-dlp zum einfachen Download von Videos und Audio
# Verwendung: ./yt-get <command> <url> [options]

set -euo pipefail

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funktionen für farbigen Output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Hilfe anzeigen
show_help() {
    cat << EOF
yt-get - Einfacher Video und Audio Downloader

VERWENDUNG:
    $0 <command> <url> [options]

COMMANDS:
    video         Video in MP4/AAC in bester verfügbarer Auflösung
    audio         Audio als MP3 herunterladen
    info          Video-Informationen anzeigen

OPTIONEN:
    -o, --output DIR     Output-Verzeichnis (Standard: aktuelles Verzeichnis)
    -q, --quality QUAL   Video-Qualität (für video command)
                         Optionen: best, worst, 720p, 1080p, 1440p, 2160p
    -v, --verbose        Detaillierte Ausgabe
    -h, --help           Diese Hilfe anzeigen

BEISPIELE:
    $0 video "https://youtube.com/watch?v=..."
    $0 audio "https://youtube.com/watch?v=..." 
    $0 video "https://youtube.com/watch?v=..." --quality 1080p
    $0 video "https://youtube.com/watch?v=..." --output ~/Downloads
    $0 info "https://youtube.com/watch?v=..."

VORAUSSETZUNGEN:
    - yt-dlp muss installiert sein
    - ffmpeg für Audio-Konvertierung (bei macOS: brew install ffmpeg)

AUSGABEFORMATE:
    video  - MP4-Container mit H.264 Video und AAC Audio
    audio  - MP3-Dateien mit 192kbps

EOF
}

# Abhängigkeiten prüfen
check_dependencies() {
    local missing_deps=()
    
    if ! command -v yt-dlp &> /dev/null; then
        missing_deps+=("yt-dlp")
    fi
    
    if ! command -v ffmpeg &> /dev/null; then
        missing_deps+=("ffmpeg")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Fehlende Abhängigkeiten: ${missing_deps[*]}"
        log_info "Installation:"
        log_info "  yt-dlp: pip install yt-dlp"
        log_info "  ffmpeg: brew install ffmpeg (macOS) oder apt install ffmpeg (Linux)"
        exit 1
    fi
}

# URL validieren
validate_url() {
    local url="$1"
    
    if [[ ! "$url" =~ ^https?:// ]]; then
        log_error "Ungültige URL: $url"
        log_info "URL muss mit http:// oder https:// beginnen"
        return 1
    fi
    
    return 0
}

# Qualitätsstring für yt-dlp generieren
get_quality_string() {
    local quality="$1"
    
    case "$quality" in
        "best")
            echo "best[ext=mp4]/bestvideo[ext=mp4]+bestaudio[ext=m4a]/best"
            ;;
        "worst")
            echo "worst[ext=mp4]/worstvideo[ext=mp4]+worstaudio[ext=m4a]/worst"
            ;;
        "720p")
            echo "best[height<=720][ext=mp4]/bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720]"
            ;;
        "1080p")
            echo "best[height<=1080][ext=mp4]/bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=1080]"
            ;;
        "1440p")
            echo "best[height<=1440][ext=mp4]/bestvideo[height<=1440][ext=mp4]+bestaudio[ext=m4a]/best[height<=1440]"
            ;;
        "2160p")
            echo "best[height<=2160][ext=mp4]/bestvideo[height<=2160][ext=mp4]+bestaudio[ext=m4a]/best[height<=2160]"
            ;;
        *)
            log_error "Ungültige Qualität: $quality"
            log_info "Gültige Optionen: best, worst, 720p, 1080p, 1440p, 2160p"
            return 1
            ;;
    esac
}

# Video herunterladen
download_video() {
    local url="$1"
    local output_dir="$2"
    local quality="$3"
    local verbose="$4"
    
    if ! validate_url "$url"; then
        return 1
    fi
    
    local quality_format
    if ! quality_format=$(get_quality_string "$quality"); then
        return 1
    fi
    
    log_info "Lade Video herunter..."
    log_info "URL: $url"
    log_info "Qualität: $quality"
    log_info "Ausgabeverzeichnis: $output_dir"
    
    local cmd=(
        yt-dlp
        --format "$quality_format"
        --output "$output_dir/%(title)s.%(ext)s"
        --merge-output-format mp4
        --embed-metadata
        --embed-chapters
        --write-description
        --write-info-json
    )
    
    if [[ "$verbose" == "true" ]]; then
        cmd+=(--verbose)
    else
        cmd+=(--no-warnings)
    fi
    
    cmd+=("$url")
    
    if "${cmd[@]}"; then
        log_success "Video erfolgreich heruntergeladen"
        return 0
    else
        log_error "Fehler beim Herunterladen des Videos"
        return 1
    fi
}

# Audio herunterladen
download_audio() {
    local url="$1"
    local output_dir="$2"
    local verbose="$3"
    
    if ! validate_url "$url"; then
        return 1
    fi
    
    log_info "Lade Audio herunter..."
    log_info "URL: $url"
    log_info "Ausgabeverzeichnis: $output_dir"
    
    local cmd=(
        yt-dlp
        --extract-audio
        --audio-format mp3
        --audio-quality 192K
        --output "$output_dir/%(title)s.%(ext)s"
        --embed-metadata
        --write-description
        --write-info-json
    )
    
    if [[ "$verbose" == "true" ]]; then
        cmd+=(--verbose)
    else
        cmd+=(--no-warnings)
    fi
    
    cmd+=("$url")
    
    if "${cmd[@]}"; then
        log_success "Audio erfolgreich heruntergeladen"
        return 0
    else
        log_error "Fehler beim Herunterladen des Audios"
        return 1
    fi
}

# Video-Informationen anzeigen
show_info() {
    local url="$1"
    local verbose="$2"
    
    if ! validate_url "$url"; then
        return 1
    fi
    
    log_info "Sammle Video-Informationen..."
    
    local cmd=(
        yt-dlp
        --dump-json
        --no-download
    )
    
    if [[ "$verbose" == "false" ]]; then
        cmd+=(--no-warnings)
    fi
    
    cmd+=("$url")
    
    if info_json=$("${cmd[@]}"); then
        echo
        log_info "Video-Informationen:"
        echo "===================="
        
        # Titel
        if title=$(echo "$info_json" | python3 -c "import sys, json; print(json.load(sys.stdin).get('title', 'Unbekannt'))" 2>/dev/null); then
            echo "Titel: $title"
        fi
        
        # Uploader
        if uploader=$(echo "$info_json" | python3 -c "import sys, json; print(json.load(sys.stdin).get('uploader', 'Unbekannt'))" 2>/dev/null); then
            echo "Uploader: $uploader"
        fi
        
        # Dauer
        if duration=$(echo "$info_json" | python3 -c "import sys, json; d=json.load(sys.stdin).get('duration'); print(f'{d//3600:02d}:{(d%3600)//60:02d}:{d%60:02d}' if d else 'Unbekannt')" 2>/dev/null); then
            echo "Dauer: $duration"
        fi
        
        # Verfügbare Formate
        echo
        log_info "Verfügbare Video-Qualitäten:"
        if "${cmd[@]}" --list-formats 2>/dev/null | grep -E "mp4|webm" | head -10; then
            :
        else
            echo "Keine Formatinformationen verfügbar"
        fi
        
        return 0
    else
        log_error "Fehler beim Abrufen der Video-Informationen"
        return 1
    fi
}

# Hauptfunktion
main() {
    local command=""
    local url=""
    local output_dir="."
    local quality="best"
    local verbose="false"
    
    # Argumentverarbeitung
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -o|--output)
                output_dir="$2"
                shift 2
                ;;
            -q|--quality)
                quality="$2"
                shift 2
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            video|audio|info)
                if [[ -n "$command" ]]; then
                    log_error "Mehrere Commands angegeben: $command und $1"
                    exit 1
                fi
                command="$1"
                shift
                ;;
            http*://*)
                if [[ -n "$url" ]]; then
                    log_error "Mehrere URLs angegeben"
                    exit 1
                fi
                url="$1"
                shift
                ;;
            -*)
                log_error "Unbekannte Option: $1"
                echo "Für Hilfe: $0 --help"
                exit 1
                ;;
            *)
                if [[ -z "$url" ]]; then
                    url="$1"
                else
                    log_error "Unerwartetes Argument: $1"
                    echo "Für Hilfe: $0 --help"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Command und URL validieren
    if [[ -z "$command" ]]; then
        log_error "Kein Command angegeben"
        echo "Verwendung: $0 <video|audio|info> <url> [options]"
        echo "Für Hilfe: $0 --help"
        exit 1
    fi
    
    if [[ -z "$url" ]]; then
        log_error "Keine URL angegeben"
        echo "Verwendung: $0 $command <url> [options]"
        exit 1
    fi
    
    # Output-Verzeichnis erstellen falls nötig
    if [[ ! -d "$output_dir" ]]; then
        if mkdir -p "$output_dir"; then
            log_info "Ausgabeverzeichnis erstellt: $output_dir"
        else
            log_error "Konnte Ausgabeverzeichnis nicht erstellen: $output_dir"
            exit 1
        fi
    fi
    
    # Abhängigkeiten prüfen
    check_dependencies
    
    # Commands ausführen
    case "$command" in
        video)
            download_video "$url" "$output_dir" "$quality" "$verbose"
            ;;
        audio)
            download_audio "$url" "$output_dir" "$verbose"
            ;;
        info)
            show_info "$url" "$verbose"
            ;;
    esac
}

# Script ausführen
main "$@"