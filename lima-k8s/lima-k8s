#!/usr/bin/env bash

# Script: lima-k8s
# Zweck: Verwaltet Lima VMs für Kubernetes (k8s) und k3s Development
# Verwendung: ./lima-k8s <command> <type> [options]

set -euo pipefail

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Funktionen für farbigen Output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Hilfe anzeigen
show_help() {
    cat << EOF
Lima Kubernetes Cluster Manager

VERWENDUNG:
    $0 <command> <type> [options]

COMMANDS:
    start         Erstellt und startet einen Cluster
    stop          Stoppt einen laufenden Cluster
    destroy       Stoppt und löscht einen Cluster komplett
    status        Zeigt Status aller Cluster an
    list          Listet verfügbare Cluster auf

TYPES:
    k8s          Standard Kubernetes Cluster
    k3s          Lightweight k3s Cluster

OPTIONEN:
    -f, --force      Keine Bestätigung vor destructiven Operationen
    -v, --verbose    Detaillierte Ausgabe
    -h, --help       Diese Hilfe anzeigen

BEISPIELE:
    $0 start k8s                 # Startet k8s Cluster
    $0 start k3s                 # Startet k3s Cluster
    $0 stop k8s                  # Stoppt k8s Cluster
    $0 destroy k3s --force       # Zerstört k3s Cluster ohne Nachfrage
    $0 status                    # Zeigt Status aller Cluster
    $0 list                      # Listet alle Cluster auf

VORAUSSETZUNGEN:
    - Lima muss installiert sein (brew install lima)
    - Mindestens 4GB RAM und 2 CPU Kerne verfügbar

CLUSTER-KONFIGURATIONEN:
    k8s    - Vollständiges Kubernetes mit kubeadm
           - URL: https://raw.githubusercontent.com/lima-vm/lima/master/examples/k8s.yaml
    
    k3s    - Lightweight k3s Distribution
           - URL: https://raw.githubusercontent.com/lima-vm/lima/master/examples/k3s.yaml

EOF
}

# Abhängigkeiten prüfen
check_dependencies() {
    local missing_deps=()
    
    if ! command -v limactl &> /dev/null; then
        missing_deps+=("lima")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Fehlende Abhängigkeiten: ${missing_deps[*]}"
        log_info "Installation: brew install lima"
        exit 1
    fi
}

# Cluster-Typ validieren
validate_cluster_type() {
    local type="$1"
    
    case "$type" in
        k8s|k3s)
            return 0
            ;;
        *)
            log_error "Ungültiger Cluster-Typ: $type"
            log_info "Gültige Typen: k8s, k3s"
            return 1
            ;;
    esac
}

# Cluster-Status prüfen
get_cluster_status() {
    local name="$1"
    
    if limactl list --format json 2>/dev/null | grep -q "\"name\":\"$name\""; then
        local status
        status=$(limactl list --format json 2>/dev/null | jq -r ".[] | select(.name==\"$name\") | .status" 2>/dev/null || echo "unknown")
        echo "$status"
    else
        echo "not_found"
    fi
}

# Cluster-URL basierend auf Typ ermitteln
get_cluster_url() {
    local type="$1"
    
    case "$type" in
        k8s)
            echo "https://raw.githubusercontent.com/lima-vm/lima/master/examples/k8s.yaml"
            ;;
        k3s)
            echo "https://raw.githubusercontent.com/lima-vm/lima/master/examples/k3s.yaml"
            ;;
    esac
}

# Bestätigung einholen
confirm_action() {
    local action="$1"
    local cluster="$2"
    local force="$3"
    
    if [[ "$force" == "true" ]]; then
        return 0
    fi
    
    log_warn "Sie sind dabei, '$action' für Cluster '$cluster' auszuführen."
    read -p "Möchten Sie fortfahren? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Operation abgebrochen"
        return 1
    fi
    return 0
}

# Cluster starten
start_cluster() {
    local type="$1"
    local force="$2"
    local verbose="$3"
    
    if ! validate_cluster_type "$type"; then
        return 1
    fi
    
    local cluster_url
    cluster_url=$(get_cluster_url "$type")
    local status
    status=$(get_cluster_status "$type")
    
    case "$status" in
        "Running")
            log_info "Cluster '$type' läuft bereits"
            return 0
            ;;
        "Stopped")
            log_info "Cluster '$type' existiert bereits, starte ihn..."
            if [[ "$verbose" == "true" ]]; then
                limactl start "$type"
            else
                limactl start "$type" >/dev/null 2>&1
            fi
            ;;
        "not_found")
            log_info "Erstelle und starte neuen '$type' Cluster..."
            log_info "Verwende Konfiguration: $cluster_url"
            
            # Cluster erstellen
            if [[ "$verbose" == "true" ]]; then
                limactl create --name="$type" --tty=false "$cluster_url"
            else
                limactl create --name="$type" --tty=false "$cluster_url" >/dev/null 2>&1
            fi
            
            # Cluster starten
            if [[ "$verbose" == "true" ]]; then
                limactl start "$type"
            else
                limactl start "$type" >/dev/null 2>&1
            fi
            ;;
        *)
            log_error "Cluster '$type' ist in unbekanntem Status: $status"
            return 1
            ;;
    esac
    
    # Erfolg prüfen
    local final_status
    final_status=$(get_cluster_status "$type")
    if [[ "$final_status" == "Running" ]]; then
        log_success "Cluster '$type' erfolgreich gestartet"
        log_info "Kubeconfig: \$HOME/.lima/$type/copied-from-guest/kubeconfig.yaml"
        log_info "Verwendung: export KUBECONFIG=\$HOME/.lima/$type/copied-from-guest/kubeconfig.yaml"
        return 0
    else
        log_error "Fehler beim Starten von Cluster '$type'"
        return 1
    fi
}

# Cluster stoppen
stop_cluster() {
    local type="$1"
    local force="$2"
    local verbose="$3"
    
    if ! validate_cluster_type "$type"; then
        return 1
    fi
    
    local status
    status=$(get_cluster_status "$type")
    
    case "$status" in
        "not_found")
            log_info "Cluster '$type' existiert nicht"
            return 0
            ;;
        "Stopped")
            log_info "Cluster '$type' ist bereits gestoppt"
            return 0
            ;;
        "Running")
            if ! confirm_action "stoppen" "$type" "$force"; then
                return 1
            fi
            
            log_info "Stoppe Cluster '$type'..."
            if [[ "$verbose" == "true" ]]; then
                limactl stop "$type"
            else
                limactl stop "$type" >/dev/null 2>&1
            fi
            ;;
        *)
            log_error "Cluster '$type' ist in unbekanntem Status: $status"
            return 1
            ;;
    esac
    
    # Erfolg prüfen
    local final_status
    final_status=$(get_cluster_status "$type")
    if [[ "$final_status" == "Stopped" ]]; then
        log_success "Cluster '$type' erfolgreich gestoppt"
        return 0
    else
        log_error "Fehler beim Stoppen von Cluster '$type'"
        return 1
    fi
}

# Cluster zerstören
destroy_cluster() {
    local type="$1"
    local force="$2"
    local verbose="$3"
    
    if ! validate_cluster_type "$type"; then
        return 1
    fi
    
    local status
    status=$(get_cluster_status "$type")
    
    case "$status" in
        "not_found")
            log_info "Cluster '$type' existiert nicht"
            return 0
            ;;
        *)
            if ! confirm_action "zerstören" "$type" "$force"; then
                return 1
            fi
            
            log_info "Zerstöre Cluster '$type' (stoppe und lösche)..."
            
            # Stoppen falls running
            if [[ "$status" == "Running" ]]; then
                log_info "Stoppe Cluster '$type'..."
                if [[ "$verbose" == "true" ]]; then
                    limactl stop "$type"
                else
                    limactl stop "$type" >/dev/null 2>&1
                fi
            fi
            
            # Löschen
            log_info "Lösche Cluster '$type'..."
            if [[ "$verbose" == "true" ]]; then
                limactl delete "$type"
            else
                limactl delete "$type" >/dev/null 2>&1
            fi
            ;;
    esac
    
    # Erfolg prüfen
    local final_status
    final_status=$(get_cluster_status "$type")
    if [[ "$final_status" == "not_found" ]]; then
        log_success "Cluster '$type' erfolgreich zerstört"
        return 0
    else
        log_error "Fehler beim Zerstören von Cluster '$type'"
        return 1
    fi
}

# Status aller Cluster anzeigen
show_status() {
    log_info "Lima Kubernetes Cluster Status:"
    echo "================================"
    
    local has_clusters=false
    
    for type in k8s k3s; do
        local status
        status=$(get_cluster_status "$type")
        
        if [[ "$status" != "not_found" ]]; then
            has_clusters=true
            local status_color
            case "$status" in
                "Running") status_color="${GREEN}$status${NC}" ;;
                "Stopped") status_color="${YELLOW}$status${NC}" ;;
                *) status_color="${RED}$status${NC}" ;;
            esac
            echo -e "$type: $status_color"
        fi
    done
    
    if [[ "$has_clusters" == "false" ]]; then
        log_info "Keine Lima Kubernetes Cluster gefunden"
    fi
}

# Alle verfügbaren Cluster auflisten
list_clusters() {
    log_info "Verfügbare Cluster-Typen:"
    echo "========================"
    echo "k8s - Standard Kubernetes mit kubeadm"
    echo "k3s - Lightweight k3s Distribution"
    echo
    
    log_info "Installierte Cluster:"
    show_status
}

# Hauptfunktion
main() {
    local command=""
    local type=""
    local force="false"
    local verbose="false"
    
    # Argumentverarbeitung
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -f|--force)
                force="true"
                shift
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            start|stop|destroy|status|list)
                if [[ -n "$command" ]]; then
                    log_error "Mehrere Commands angegeben: $command und $1"
                    exit 1
                fi
                command="$1"
                shift
                ;;
            k8s|k3s)
                if [[ -n "$type" ]]; then
                    log_error "Mehrere Typen angegeben: $type und $1"
                    exit 1
                fi
                type="$1"
                shift
                ;;
            -*)
                log_error "Unbekannte Option: $1"
                echo "Für Hilfe: $0 --help"
                exit 1
                ;;
            *)
                log_error "Unerwartetes Argument: $1"
                echo "Für Hilfe: $0 --help"
                exit 1
                ;;
        esac
    done
    
    # Command validieren
    if [[ -z "$command" ]]; then
        log_error "Kein Command angegeben"
        echo "Verwendung: $0 <command> <type> [options]"
        echo "Für Hilfe: $0 --help"
        exit 1
    fi
    
    # Abhängigkeiten prüfen
    check_dependencies
    
    # Commands ausführen
    case "$command" in
        start|stop|destroy)
            if [[ -z "$type" ]]; then
                log_error "Cluster-Typ erforderlich für '$command'"
                echo "Verwendung: $0 $command <k8s|k3s> [options]"
                exit 1
            fi
            
            case "$command" in
                start)
                    start_cluster "$type" "$force" "$verbose"
                    ;;
                stop)
                    stop_cluster "$type" "$force" "$verbose"
                    ;;
                destroy)
                    destroy_cluster "$type" "$force" "$verbose"
                    ;;
            esac
            ;;
        status)
            show_status
            ;;
        list)
            list_clusters
            ;;
    esac
}

# Script ausführen
main "$@"